{"ast":null,"code":"import _classCallCheck from \"/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/src/components/Watch.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { openModal, closeModal, deleteJob } from \"../actions\";\nimport JobInfo from './JobInfo';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      width: '90%',\n      margin: '0 auto'\n    },\n    running: {\n      color: '#8b8ffb'\n    },\n    failed: {\n      color: '#f26363'\n    },\n    finished: {\n      color: '#63f291'\n    }\n  };\n};\n\nvar Watch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Watch, _React$Component);\n\n  function Watch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Watch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Watch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.open = function (id) {\n      return function (event) {\n        _this.props.openModal(id);\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Watch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      return React.createElement(\"div\", {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Watch\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), props.loading && React.createElement(LinearProgress, {\n        className: classes.progress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(List, {\n        component: \"nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.props.jobs.map(function (job, i) {\n        var icon;\n\n        if (job.status === 'running') {\n          icon = React.createElement(ScheduleIcon, {\n            className: classes.running,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          });\n        } else if (job.status === 'failed') {\n          icon = React.createElement(HighlightOffIcon, {\n            className: classes.failed,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          });\n        } else {\n          icon = React.createElement(DoneIcon, {\n            className: classes.finished,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(ListItem, {\n          button: true,\n          key: i,\n          onClick: _this2.open(i),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(ListItemIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, icon), React.createElement(ListItemText, {\n          inset: true,\n          primary: job.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }));\n      })), React.createElement(JobInfo, {\n        close: this.props.closeModal,\n        open: this.props.modalOpen,\n        name: this.props.name,\n        delete: this.deleteJob,\n        links: this.props.links,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Watch;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    jobs: state.jobsList,\n    modalOpen: state.modalOpen,\n    currentId: state.current,\n    name: state.currentName,\n    links: state.currentLinks,\n    loading: state.loading\n  };\n};\n\nWatch.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, {\n  openModal: openModal,\n  closeModal: closeModal,\n  deleteJob: deleteJob,\n  fetchJob: fetchJob\n})(withStyles(styles)(Watch));","map":{"version":3,"sources":["/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/src/components/Watch.jsx"],"names":["React","connect","PropTypes","withStyles","List","ListItem","ListItemIcon","ListItemText","ScheduleIcon","HighlightOffIcon","DoneIcon","openModal","closeModal","deleteJob","JobInfo","styles","theme","root","width","margin","running","color","failed","finished","Watch","open","id","event","props","classes","loading","progress","jobs","map","job","i","icon","status","name","modalOpen","links","Component","mapStateToProps","state","jobsList","currentId","current","currentName","currentLinks","propTypes","object","isRequired","fetchJob"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport { openModal, closeModal, deleteJob } from \"../actions\";\n\nimport JobInfo from './JobInfo'\n\nconst styles = theme => ({\n    root: {\n        width: '90%',\n        margin: '0 auto',\n    },\n    running: {\n        color: '#8b8ffb',\n    },\n    failed: {\n        color: '#f26363',\n    },\n    finished: {\n        color: '#63f291',\n    }\n});\n\n\nclass Watch extends React.Component {\n    componentDidMount() {\n\n    }\n\n    open = (id) => event => {\n        this.props.openModal(id);\n    }\n\n    render () {\n        const { classes } = this.props;\n        return (\n            <div className={classes.root}>\n                <h1>Watch</h1>\n                <hr />\n                {props.loading && <LinearProgress className={classes.progress}/>}\n                <List component=\"nav\">\n                    {this.props.jobs.map((job, i) => {\n                        let icon;\n                        if (job.status === 'running') {\n                            icon = (<ScheduleIcon className={classes.running}/>)\n                        } else if (job.status === 'failed') {\n                            icon = (<HighlightOffIcon className={classes.failed}/>)\n                        } else {\n                            icon = (<DoneIcon className={classes.finished}/>)\n                        }\n                        return (\n                            <ListItem button key={i} onClick={this.open(i)}>\n                                <ListItemIcon>\n                                    {icon}\n                                </ListItemIcon>\n                                <ListItemText inset primary={job.name} />\n                            </ListItem>\n                        );\n                    })}\n                </List>\n                <JobInfo\n                    close={this.props.closeModal}\n                    open={this.props.modalOpen}\n                    name={this.props.name}\n                    delete={this.deleteJob}\n                    links={this.props.links}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        jobs: state.jobsList,\n        modalOpen: state.modalOpen,\n        currentId: state.current,\n        name: state.currentName,\n        links: state.currentLinks,\n        loading: state.loading\n    };\n};\n\nWatch.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default connect(mapStateToProps, { openModal, closeModal, deleteJob, fetchJob })(withStyles(styles)(Watch));"]},"metadata":{},"sourceType":"module"}