{"ast":null,"code":"import _regeneratorRuntime from \"/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { take, put, call, fork, select, all, takeEvery } from 'redux-saga/effects';\nimport * as actions from '../actions';\nimport axios from 'axios'; // const shittyOne = () => {\n//     return {\n//         type: 'REQUESTED_SHIT'\n//     }\n// };\n//\n// function* watchShitty() {\n//     yield takeEvery('REQUESTED_SHIT', shittyOneAsync);\n// }\n//\n// function* shittyOneAsync() {\n//     try {\n//         const data = yield call(() => {\n//             //send request here\n//             fetch('https://dog.ceo/api/breeds/image/random')\n//                 .then(res => res.json())\n//         })\n//\n//     }catch(error) {\n//         yield  put('SHIT');\n//     }\n// }\n\nexport var fetchJobsSaga =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function fetchJobsSaga() {\n  var action, result, i;\n  return _regeneratorRuntime.wrap(function fetchJobsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return take(actions.FETCH_JOB_REQUEST);\n\n        case 2:\n          action = _context.sent;\n          _context.prev = 3;\n          _context.next = 6;\n          return call(fetchJobsGo);\n\n        case 6:\n          result = _context.sent;\n          console.log(result);\n          jobList = [];\n\n          for (i = 0; i < result.Names.length; i++) {\n            jobList.push({\n              name: result.Names[i],\n              status: result.Status[i]\n            });\n          }\n\n          _context.next = 12;\n          return put({\n            type: actions.FETCH_JOB_SUCCESS,\n            jobList: jobList\n          });\n\n        case 12:\n          _context.next = 17;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          return _context.abrupt(\"return\", Promise.reject(_context.t0.message));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, fetchJobsSaga, this, [[3, 14]]);\n});\n\nvar fetchJobsGo =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function fetchJobsGo() {\n  var data, result;\n  return _regeneratorRuntime.wrap(function fetchJobsGo$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          data = {};\n          _context2.next = 4;\n          return call(axios.get, 'http://127.0.0.1:9303/fetch_jobs/');\n\n        case 4:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", result.data);\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: actions.FETCH_JOB_FAILURE,\n            error: \"Whoops, something is wrong...\"\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, fetchJobsGo, this, [[0, 8]]);\n});\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fetchJobsSaga()]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, this);\n}\n;","map":{"version":3,"sources":["/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/src/sagas/index.js"],"names":["rootSaga","take","put","call","fork","select","all","takeEvery","actions","axios","fetchJobsSaga","FETCH_JOB_REQUEST","action","fetchJobsGo","result","console","log","jobList","i","Names","length","push","name","status","Status","type","FETCH_JOB_SUCCESS","Promise","reject","message","data","get","FETCH_JOB_FAILURE","error"],"mappings":";;;;yBAuEyBA,Q;;AAvEzB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,GAAxC,EAA6CC,SAA7C,QAA8D,oBAA9D;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,aAAa;AAAA;AAAA,yBAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACV,iBAAMT,IAAI,CAACO,OAAO,CAACG,iBAAT,CAAV;;AADU;AACnBC,UAAAA,MADmB;AAAA;AAAA;AAGN,iBAAMT,IAAI,CACrBU,WADqB,CAAV;;AAHM;AAGfC,UAAAA,MAHe;AAOrBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAG,UAAAA,OAAO,GAAG,EAAV;;AACA,eAAQC,CAAR,GAAY,CAAZ,EAAeA,CAAC,GAAGJ,MAAM,CAACK,KAAP,CAAaC,MAAhC,EAAwCF,CAAC,EAAzC,EAA6C;AACzCD,YAAAA,OAAO,CAACI,IAAR,CACI;AACIC,cAAAA,IAAI,EAAER,MAAM,CAACK,KAAP,CAAaD,CAAb,CADV;AAEIK,cAAAA,MAAM,EAAET,MAAM,CAACU,MAAP,CAAcN,CAAd;AAFZ,aADJ;AAMH;;AAhBoB;AAiBrB,iBAAMhB,GAAG,CAAC;AACNuB,YAAAA,IAAI,EAAEjB,OAAO,CAACkB,iBADR;AAENT,YAAAA,OAAO,EAAEA;AAFH,WAAD,CAAT;;AAjBqB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAsBdU,OAAO,CAACC,MAAR,CAAe,YAAIC,OAAnB,CAtBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhBnB,aAAgB;AAAA,CAAH,CAAnB;;AA0BP,IAAMG,WAAW;AAAA;AAAA,yBAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAERiB,UAAAA,IAFQ,GAED,EAFC;AAAA;AAIG,iBAAM3B,IAAI,CACrBM,KAAK,CAACsB,GADe,EAErB,mCAFqB,CAAV;;AAJH;AAINjB,UAAAA,MAJM;AAAA,4CASLA,MAAM,CAACgB,IATF;;AAAA;AAAA;AAAA;AAAA;AAWZ,iBAAM5B,GAAG,CAAC;AACNuB,YAAAA,IAAI,EAAEjB,OAAO,CAACwB,iBADR;AAENC,YAAAA,KAAK,EAAE;AAFD,WAAD,CAAT;;AAXY;AAAA;AAAA;AAAA;AAAA;AAAA,KAAdpB,WAAc;AAAA,CAAH,CAAjB;;AAkBA,eAAe,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMM,GAAG,CAAC,CACNI,aAAa,EADP,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAId","sourcesContent":["import { take, put, call, fork, select, all, takeEvery } from 'redux-saga/effects';\nimport * as actions from '../actions';\nimport axios from 'axios';\n\n// const shittyOne = () => {\n//     return {\n//         type: 'REQUESTED_SHIT'\n//     }\n// };\n//\n// function* watchShitty() {\n//     yield takeEvery('REQUESTED_SHIT', shittyOneAsync);\n// }\n//\n// function* shittyOneAsync() {\n//     try {\n//         const data = yield call(() => {\n//             //send request here\n//             fetch('https://dog.ceo/api/breeds/image/random')\n//                 .then(res => res.json())\n//         })\n//\n//     }catch(error) {\n//         yield  put('SHIT');\n//     }\n// }\n\nexport const fetchJobsSaga = function *() {\n    const action = yield take(actions.FETCH_JOB_REQUEST);\n    try {\n        const result = yield call(\n            fetchJobsGo\n        );\n        \n        console.log(result);\n        jobList = [];\n        for(let i = 0; i < result.Names.length; i++) {\n            jobList.push(\n                {\n                    name: result.Names[i],\n                    status: result.Status[i],\n                }\n            );\n        }\n        yield put({\n            type: actions.FETCH_JOB_SUCCESS,\n            jobList: jobList,\n        });\n    } catch (err) {\n        return Promise.reject(err.message)\n    }\n};\n\nconst fetchJobsGo = function* () {\n    try {\n        let data = {}\n\n        const result = yield call(\n            axios.get,\n            'http://127.0.0.1:9303/fetch_jobs/'\n        );\n\n        return result.data;\n    } catch (err) {\n        yield put({\n            type: actions.FETCH_JOB_FAILURE,\n            error: \"Whoops, something is wrong...\",\n        });\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fetchJobsSaga()\n    ]);\n};"]},"metadata":{},"sourceType":"module"}