{"ast":null,"code":"import _objectSpread from \"/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as ActionTypes from '../actions'; // import { combineReducers } from 'redux';\n\nvar initialState = {\n  yaml: \"apiVersion: kubebench.operator/v1\\n    kind: KubebenchJob\\n    metadata:\\n      name: kubebench-job\\n      namespace: default\\n    spec:\\n      serviceAccount: default\\n      volumeSpecs:\\n        configVolume:\\n          name: my-config-volume\\n          persistentVolumeClaim:\\n            claimName: kubebench-config-pvc\\n        experimentVolume:\\n          name: my-experiment-volume\\n          persistentVolumeClaim:\\n            claimName: kubebench-exp-pvc\\n      secretSpecs: # optional\\n        githubTokenSecret: # optional\\n          secretName: my-github-token-secret\\n          secretKey: my-github-token-secret-key\\n        gcpCredentialsSecret: # optional\\n          secretName: my-gcp-credentials-secret\\n          secretKey: my-gcp-credentials-secret-key\\n      jobSpecs:\\n        preJob: # optional\\n          container: # optional between \\\"container\\\" and \\\"resource\\\"\\n            name: my-prejob\\n            image: gcr.io/myprejob-image:latest # change it before using\\n        mainJob: # mandatory\\n          resource: # optional between \\\"container\\\" and \\\"resource\\\"\\n            manifestTemplate:\\n              valueFrom:\\n                ksonnet: # optional, more types in the future\\n                  prototype: kubebench-example-tfcnn\\n                  package: kubebench-examples\\n                  registry: github.com/kubeflow/kubebench/tree/master/kubebench\\n            manifestParameters:\\n              valueFrom:\\n                path: abc/def/ghi.yaml\\n            createSuccessCondition: createSuccess # optional\\n            createFailureCondition: createFailure # optional\\n            runSuccessCondition: runSuccess # optional\\n            runFailureCondition: runFailre # optional\\n            #other optional fields: \\\"manifest\\\" - string of raw manifest\\n        postJob: # optional\\n          container: # optional between \\\"container\\\" and \\\"resource\\\"\\n            name: my-postjob\\n            image: gcr.io/kubeflow-images-public/kubebench/kubebench-example-tf-cnn-post-processor:3c75b50\\n      reportSpecs: # optional\\n        csv: # optional\\n            - inputPath: result.json\\n              outputPath: report.csv\",\n  loading: false,\n  snackOpen: false,\n  snackText: '',\n  jobsList: [],\n  modalOpen: false,\n  currentId: null,\n  currentName: '',\n  currentLinks: ['First link', 'Second link'],\n  parameters: [{\n    name: \"name\",\n    value: \"kubebench-job\",\n    description: \"Job name\"\n  }, {\n    name: \"serviceAccount\",\n    value: \"default\",\n    description: \"The service account used to run the job\"\n  }, {\n    name: \"controllerImage\",\n    value: \"gcr.io/kubeflow-images-public/kubebench/kubebench-controller:3c75b50\",\n    description: \"Configurator image\"\n  }, {\n    name: \"githubTokenSecret\",\n    description: \"\",\n    value: \"GitHub token secret\"\n  }, {\n    name: \"githubTokenSecretKey\",\n    value: \"\",\n    description: \"Key of GitHub token secret\"\n  }, {\n    name: \"gcpCredentialsSecret\",\n    value: \"GCP credentials secret\",\n    description: \"\"\n  }, {\n    name: \"gcpCredentialsSecretKey\",\n    value: \"\",\n    description: \"Key of GCP credentials secret\"\n  }, {\n    name: \"mainJobKsPrototype\",\n    value: \"kubebench-example-tfcnn\",\n    description: \"The Ksonnet prototype of the job being benchmarked\"\n  }, {\n    name: \"mainJobKsPackage\",\n    value: \"kubebench-examples\",\n    description: \"The Ksonnet package of the job being benchmarked\"\n  }, {\n    name: \"mainJobKsRegistry\",\n    value: \"github.com/kubeflow/kubebench/tree/master/kubebench\",\n    description: \"The Ksonnet registry of the job being benchmarked\"\n  }, {\n    name: \"mainJobConfig\",\n    value: \"tf-cnn/tf-cnn-dummy.yaml\",\n    description: \"Path to the config of the benchmarked job\"\n  }, {\n    name: \"experimentConfigPvc\",\n    value: \"kubebench-config-pvc\",\n    description: \"Configuration PVC\"\n  }, {\n    name: \"experimentDataPvc\",\n    value: \"\",\n    description: \"Data PVC\"\n  }, {\n    name: \"experimentRecordPvc\",\n    value: \"kubebench-exp-pvc\",\n    description: \"Experiment PVC\"\n  }, {\n    name: \"postJobImage\",\n    value: \"gcr.io/kubeflow-images-public/kubebench/kubebench-example-tf-cnn-post-processor:3c75b50\",\n    description: \"Image of post processor\"\n  }, {\n    name: \"postJobArgs\",\n    value: \"\",\n    description: \"Arguments of post processor\"\n  }, {\n    name: \"reportType\",\n    value: \"csv\",\n    description: \"Type of reporter\"\n  }, {\n    name: \"csvReporterInput\",\n    value: \"result.json\",\n    description: \"The input of CSV reporter\"\n  }, {\n    name: \"csvReporterOutput\",\n    value: \"report.csv\",\n    description: \"The output of CSV reporter\"\n  }]\n};\n\nvar filterValue = function filterValue(obj, key) {\n  return obj.findIndex(function (p) {\n    return p.name === key;\n  });\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // MODIFY\n    case ActionTypes.CHANGE_YAML:\n      return _objectSpread({}, state, {\n        yaml: action.yaml\n      });\n    // DEPLOY WHOLE\n\n    case ActionTypes.DEPLOY_SUBMIT:\n      return _objectSpread({}, state, {\n        loading: action.loading // snackOpen: true,\n        // snackText: 'Successfully deployed',\n\n      });\n\n    case ActionTypes.DEPLOY_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        snackOpen: true,\n        snackText: action.text\n      });\n\n    case ActionTypes.DEPLOY_FAILURE:\n      return _objectSpread({}, state, {\n        loading: false,\n        snackOpen: true,\n        snackText: action.error\n      });\n    // DEPLOY PARAMS\n\n    case ActionTypes.DEPLOY_PARAM_SUBMIT:\n      return _objectSpread({}, state, {\n        loading: action.loading\n      });\n\n    case ActionTypes.DEPLOY_PARAM_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        snackOpen: true,\n        snackText: action.text\n      });\n\n    case ActionTypes.DEPLOY_PARAM_FAILURE:\n      return _objectSpread({}, state, {\n        loading: false,\n        snackOpen: true,\n        snackText: action.error\n      });\n    // SNACK\n\n    case ActionTypes.CLOSE_SNACK:\n      return _objectSpread({}, state, {\n        snackOpen: false\n      });\n    // SELECT_JOB\n\n    case ActionTypes.SELECT_JOB:\n      return _objectSpread({}, state, {\n        modalOpen: true,\n        currentId: action.id,\n        currentName: state.jobsList[action.id].name\n      });\n\n    case ActionTypes.CLOSE_SELECT_JOB:\n      return _objectSpread({}, state, {\n        modalOpen: false,\n        currentId: action.id\n      });\n    // MODIFY\n\n    case ActionTypes.CHANGE_PARAMETER:\n      var params = state.parameters.slice();\n      var index = filterValue(params, action.name);\n      params[index].value = action.value;\n      return _objectSpread({}, state, {\n        parameters: params\n      });\n    // FETCH\n\n    case ActionTypes.FETCH_JOB_REQUEST:\n      return _objectSpread({}, state, {\n        loading: action.loading\n      });\n\n    case ActionTypes.FETCH_JOB_SUCCESS:\n      return _objectSpread({}, state, {\n        jobsList: action.jobsList,\n        loading: false\n      });\n\n    case ActionTypes.FETCH_JOB_FAILURE:\n      return _objectSpread({}, state, {\n        loading: false,\n        snackOpen: true,\n        snackText: action.error\n      });\n    // DELETE\n\n    case ActionTypes.DELETE_SUBMIT:\n      return _objectSpread({}, state, {\n        loading: action.loading\n      });\n\n    case ActionTypes.DELETE_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        snackOpen: true,\n        snackText: action.text\n      });\n\n    case ActionTypes.DELETE_FAILURE:\n      return _objectSpread({}, state, {\n        loading: false,\n        snackOpen: true,\n        snackText: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/home/akado2009/go/src/github.com/kubeflow/kubebench/dashboard/frontend/src/reducers/index.js"],"names":["ActionTypes","initialState","yaml","loading","snackOpen","snackText","jobsList","modalOpen","currentId","currentName","currentLinks","parameters","name","value","description","filterValue","obj","key","findIndex","p","rootReducer","state","action","type","CHANGE_YAML","DEPLOY_SUBMIT","DEPLOY_SUCCESS","text","DEPLOY_FAILURE","error","DEPLOY_PARAM_SUBMIT","DEPLOY_PARAM_SUCCESS","DEPLOY_PARAM_FAILURE","CLOSE_SNACK","SELECT_JOB","id","CLOSE_SELECT_JOB","CHANGE_PARAMETER","params","slice","index","FETCH_JOB_REQUEST","FETCH_JOB_SUCCESS","FETCH_JOB_FAILURE","DELETE_SUBMIT","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"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","sourcesContent":["import * as ActionTypes from '../actions';\n// import { combineReducers } from 'redux';\n\nconst initialState = {\n    yaml: `apiVersion: kubebench.operator/v1\n    kind: KubebenchJob\n    metadata:\n      name: kubebench-job\n      namespace: default\n    spec:\n      serviceAccount: default\n      volumeSpecs:\n        configVolume:\n          name: my-config-volume\n          persistentVolumeClaim:\n            claimName: kubebench-config-pvc\n        experimentVolume:\n          name: my-experiment-volume\n          persistentVolumeClaim:\n            claimName: kubebench-exp-pvc\n      secretSpecs: # optional\n        githubTokenSecret: # optional\n          secretName: my-github-token-secret\n          secretKey: my-github-token-secret-key\n        gcpCredentialsSecret: # optional\n          secretName: my-gcp-credentials-secret\n          secretKey: my-gcp-credentials-secret-key\n      jobSpecs:\n        preJob: # optional\n          container: # optional between \"container\" and \"resource\"\n            name: my-prejob\n            image: gcr.io/myprejob-image:latest # change it before using\n        mainJob: # mandatory\n          resource: # optional between \"container\" and \"resource\"\n            manifestTemplate:\n              valueFrom:\n                ksonnet: # optional, more types in the future\n                  prototype: kubebench-example-tfcnn\n                  package: kubebench-examples\n                  registry: github.com/kubeflow/kubebench/tree/master/kubebench\n            manifestParameters:\n              valueFrom:\n                path: abc/def/ghi.yaml\n            createSuccessCondition: createSuccess # optional\n            createFailureCondition: createFailure # optional\n            runSuccessCondition: runSuccess # optional\n            runFailureCondition: runFailre # optional\n            #other optional fields: \"manifest\" - string of raw manifest\n        postJob: # optional\n          container: # optional between \"container\" and \"resource\"\n            name: my-postjob\n            image: gcr.io/kubeflow-images-public/kubebench/kubebench-example-tf-cnn-post-processor:3c75b50\n      reportSpecs: # optional\n        csv: # optional\n            - inputPath: result.json\n              outputPath: report.csv`,\n    loading: false,\n    snackOpen: false,\n    snackText: '',\n    jobsList: [\n    ],\n    modalOpen: false,\n    currentId: null,\n    currentName: '',\n    currentLinks: ['First link', 'Second link'],\n    parameters: [\n        {\n            name: \"name\",\n            value: \"kubebench-job\",\n            description: \"Job name\",\n        },\n        {\n            name: \"serviceAccount\",\n            value: \"default\",\n            description: \"The service account used to run the job\",\n        },\n        {\n            name: \"controllerImage\",\n            value: \"gcr.io/kubeflow-images-public/kubebench/kubebench-controller:3c75b50\",\n            description: \"Configurator image\",\n        },\n        {\n            name: \"githubTokenSecret\",\n            description: \"\",\n            value: \"GitHub token secret\",\n        },\n        {\n            name: \"githubTokenSecretKey\",\n            value: \"\",\n            description: \"Key of GitHub token secret\",\n        },\n        {\n            name: \"gcpCredentialsSecret\",\n            value: \"GCP credentials secret\",\n            description: \"\",\n        },\n        {\n            name: \"gcpCredentialsSecretKey\",\n            value: \"\",\n            description: \"Key of GCP credentials secret\",\n        },\n        {\n            name: \"mainJobKsPrototype\",\n            value: \"kubebench-example-tfcnn\",\n            description: \"The Ksonnet prototype of the job being benchmarked\",\n        },\n        {\n            name: \"mainJobKsPackage\",\n            value: \"kubebench-examples\",\n            description: \"The Ksonnet package of the job being benchmarked\",\n        },\n        {\n            name: \"mainJobKsRegistry\",\n            value: \"github.com/kubeflow/kubebench/tree/master/kubebench\",\n            description: \"The Ksonnet registry of the job being benchmarked\",\n        },\n        {\n            name: \"mainJobConfig\",\n            value: \"tf-cnn/tf-cnn-dummy.yaml\",\n            description: \"Path to the config of the benchmarked job\",\n        },\n        {\n            name: \"experimentConfigPvc\",\n            value: \"kubebench-config-pvc\",\n            description: \"Configuration PVC\",\n        },\n        {\n            name: \"experimentDataPvc\",\n            value: \"\",\n            description: \"Data PVC\",\n        },\n        {\n            name: \"experimentRecordPvc\",\n            value: \"kubebench-exp-pvc\",\n            description: \"Experiment PVC\",\n        },\n        {\n            name: \"postJobImage\",\n            value: \"gcr.io/kubeflow-images-public/kubebench/kubebench-example-tf-cnn-post-processor:3c75b50\",\n            description: \"Image of post processor\",\n        },\n        {\n            name: \"postJobArgs\",\n            value: \"\",\n            description: \"Arguments of post processor\",\n        },\n        {\n            name: \"reportType\",\n            value: \"csv\",\n            description: \"Type of reporter\",\n        },\n        {\n            name: \"csvReporterInput\",\n            value: \"result.json\",\n            description: \"The input of CSV reporter\",\n        },\n        {\n            name: \"csvReporterOutput\",\n            value: \"report.csv\",\n            description: \"The output of CSV reporter\",\n        }\n    ]\n};\n\nconst filterValue = (obj, key) => {\n    return obj.findIndex(p => p.name === key)\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        // MODIFY\n        case ActionTypes.CHANGE_YAML:\n            return {\n                ...state,\n                yaml: action.yaml,\n            };\n        \n        // DEPLOY WHOLE\n        case ActionTypes.DEPLOY_SUBMIT:\n            return {\n                ...state,\n                loading: action.loading,\n                // snackOpen: true,\n                // snackText: 'Successfully deployed',\n            };\n        case ActionTypes.DEPLOY_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                snackOpen: true,\n                snackText: action.text,\n            };\n        case ActionTypes.DEPLOY_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                snackOpen: true,\n                snackText: action.error\n            };\n\n        \n        // DEPLOY PARAMS\n        case ActionTypes.DEPLOY_PARAM_SUBMIT:\n            return {\n                ...state,\n                loading: action.loading,\n            };\n        case ActionTypes.DEPLOY_PARAM_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                snackOpen: true,\n                snackText: action.text,\n            };\n        case ActionTypes.DEPLOY_PARAM_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                snackOpen: true,\n                snackText: action.error,\n            };\n        \n        // SNACK\n        case ActionTypes.CLOSE_SNACK:\n            return {\n                ...state,\n                snackOpen: false,\n            };\n\n        // SELECT_JOB\n        case ActionTypes.SELECT_JOB:\n            return {\n                ...state,\n                modalOpen: true,\n                currentId: action.id,\n                currentName: state.jobsList[action.id].name,\n            };\n        case ActionTypes.CLOSE_SELECT_JOB:\n            return {\n                ...state,\n                modalOpen: false,\n                currentId: action.id,\n            };\n            \n        // MODIFY\n        case ActionTypes.CHANGE_PARAMETER:\n            let params = state.parameters.slice();\n            let index = filterValue(params, action.name);\n            params[index].value = action.value;\n            return {\n                ...state,\n                parameters: params,\n            };\n\n        // FETCH\n        case ActionTypes.FETCH_JOB_REQUEST:\n            return {\n                ...state,\n                loading: action.loading,\n            };\n        case ActionTypes.FETCH_JOB_SUCCESS:\n            return {\n                ...state,\n                jobsList: action.jobsList,\n                loading: false,\n            };\n        case ActionTypes.FETCH_JOB_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                snackOpen: true,\n                snackText: action.error,\n            };\n\n        // DELETE\n        case ActionTypes.DELETE_SUBMIT:\n            return {\n                ...state,\n                loading: action.loading,\n            };\n        case ActionTypes.DELETE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                snackOpen: true,\n                snackText: action.text,\n            };\n        case ActionTypes.DELETE_FAILURE: \n            return {\n                ...state, \n                loading: false,\n                snackOpen: true,\n                snackText: action.error,\n            };\n\n        default:\n            return state;\n\n    }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}