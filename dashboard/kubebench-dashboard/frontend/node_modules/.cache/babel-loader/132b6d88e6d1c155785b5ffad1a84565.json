{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setTranslateValue = setTranslateValue;\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _reactEventListener = _interopRequireDefault(require(\"react-event-listener\"));\n\nvar _debounce = _interopRequireDefault(require(\"debounce\"));\n\nvar _Transition = _interopRequireDefault(require(\"react-transition-group/Transition\"));\n\nvar _ownerWindow = _interopRequireDefault(require(\"../utils/ownerWindow\"));\n\nvar _withTheme = _interopRequireDefault(require(\"../styles/withTheme\"));\n\nvar _transitions = require(\"../styles/transitions\");\n\nvar _utils = require(\"../transitions/utils\"); // @inheritedComponent Transition\n// < 1kb payload overhead when lodash/debounce is > 3kb.\n\n\nvar GUTTER = 24; // Translate the node so he can't be seen on the screen.\n// Later, we gonna translate back the node to his original location\n// with `translate3d(0, 0, 0)`.`\n\nfunction getTranslateValue(props, node) {\n  var direction = props.direction;\n  var rect = node.getBoundingClientRect();\n  var transform;\n\n  if (node.fakeTransform) {\n    transform = node.fakeTransform;\n  } else {\n    var computedStyle = (0, _ownerWindow.default)(node).getComputedStyle(node);\n    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');\n  }\n\n  var offsetX = 0;\n  var offsetY = 0;\n\n  if (transform && transform !== 'none' && typeof transform === 'string') {\n    var transformValues = transform.split('(')[1].split(')')[0].split(',');\n    offsetX = parseInt(transformValues[4], 10);\n    offsetY = parseInt(transformValues[5], 10);\n  }\n\n  if (direction === 'left') {\n    return \"translateX(100vw) translateX(-\".concat(rect.left - offsetX, \"px)\");\n  }\n\n  if (direction === 'right') {\n    return \"translateX(-\".concat(rect.left + rect.width + GUTTER - offsetX, \"px)\");\n  }\n\n  if (direction === 'up') {\n    return \"translateY(100vh) translateY(-\".concat(rect.top - offsetY, \"px)\");\n  } // direction === 'down'\n\n\n  return \"translateY(-\".concat(rect.top + rect.height + GUTTER - offsetY, \"px)\");\n}\n\nfunction setTranslateValue(props, node) {\n  var transform = getTranslateValue(props, node);\n\n  if (transform) {\n    node.style.webkitTransform = transform;\n    node.style.transform = transform;\n  }\n}\n/**\n * The Slide transition is used by the [Snackbar](/demos/snackbars/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\n\nvar Slide =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(Slide, _React$Component);\n\n  function Slide() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Slide);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Slide).call(this));\n    _this.mounted = false;\n\n    _this.handleEnter = function (node) {\n      setTranslateValue(_this.props, node);\n      (0, _utils.reflow)(node);\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(node);\n      }\n    };\n\n    _this.handleEntering = function (node) {\n      var theme = _this.props.theme;\n      var transitionProps = (0, _utils.getTransitionProps)(_this.props, {\n        mode: 'enter'\n      });\n      node.style.webkitTransition = theme.transitions.create('-webkit-transform', (0, _extends2.default)({}, transitionProps, {\n        easing: theme.transitions.easing.easeOut\n      }));\n      node.style.transition = theme.transitions.create('transform', (0, _extends2.default)({}, transitionProps, {\n        easing: theme.transitions.easing.easeOut\n      }));\n      node.style.webkitTransform = 'translate(0, 0)';\n      node.style.transform = 'translate(0, 0)';\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(node);\n      }\n    };\n\n    _this.handleExit = function (node) {\n      var theme = _this.props.theme;\n      var transitionProps = (0, _utils.getTransitionProps)(_this.props, {\n        mode: 'exit'\n      });\n      node.style.webkitTransition = theme.transitions.create('-webkit-transform', (0, _extends2.default)({}, transitionProps, {\n        easing: theme.transitions.easing.sharp\n      }));\n      node.style.transition = theme.transitions.create('transform', (0, _extends2.default)({}, transitionProps, {\n        easing: theme.transitions.easing.sharp\n      }));\n      setTranslateValue(_this.props, node);\n\n      if (_this.props.onExit) {\n        _this.props.onExit(node);\n      }\n    };\n\n    _this.handleExited = function (node) {\n      // No need for transitions when the component is hidden\n      node.style.webkitTransition = '';\n      node.style.transition = '';\n\n      if (_this.props.onExited) {\n        _this.props.onExited(node);\n      }\n    };\n\n    if (typeof window !== 'undefined') {\n      _this.handleResize = (0, _debounce.default)(function () {\n        // Skip configuration where the position is screen size invariant.\n        if (_this.props.in || _this.props.direction === 'down' || _this.props.direction === 'right') {\n          return;\n        }\n\n        if (_this.transitionRef) {\n          setTranslateValue(_this.props, _this.transitionRef);\n        }\n      }, 166); // Corresponds to 10 frames at 60 Hz.\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Slide, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true; // state.mounted handle SSR, once the component is mounted, we need\n      // to properly hide it.\n\n      if (!this.props.in) {\n        // We need to set initial translate values of transition element\n        // otherwise component will be shown when in=false.\n        this.updatePosition();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.direction !== this.props.direction && !this.props.in) {\n        // We need to update the position of the drawer when the direction change and\n        // when it's hidden.\n        this.updatePosition();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.handleResize.clear();\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this.transitionRef) {\n        this.transitionRef.style.visibility = 'inherit';\n        setTranslateValue(this.props, this.transitionRef);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          onEnter = _this$props.onEnter,\n          onEntering = _this$props.onEntering,\n          onExit = _this$props.onExit,\n          onExited = _this$props.onExited,\n          styleProp = _this$props.style,\n          theme = _this$props.theme,\n          other = (0, _objectWithoutProperties2.default)(_this$props, [\"children\", \"onEnter\", \"onEntering\", \"onExit\", \"onExited\", \"style\", \"theme\"]);\n      var style = {}; // We use this state to handle the server-side rendering.\n      // We don't know the width of the children ahead of time.\n      // We need to render it.\n\n      if (!this.props.in && !this.mounted) {\n        style.visibility = 'hidden';\n      }\n\n      style = (0, _extends2.default)({}, style, styleProp, _react.default.isValidElement(children) ? children.props.style : {});\n      return _react.default.createElement(_reactEventListener.default, {\n        target: \"window\",\n        onResize: this.handleResize\n      }, _react.default.createElement(_Transition.default, (0, _extends2.default)({\n        onEnter: this.handleEnter,\n        onEntering: this.handleEntering,\n        onExit: this.handleExit,\n        onExited: this.handleExited,\n        appear: true,\n        style: style,\n        ref: function ref(_ref) {\n          _this2.transitionRef = _reactDom.default.findDOMNode(_ref);\n        }\n      }, other), children));\n    }\n  }]);\n  return Slide;\n}(_react.default.Component);\n\nSlide.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A single child content element.\n   */\n  children: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),\n\n  /**\n   * Direction the child node will enter from.\n   */\n  direction: _propTypes.default.oneOf(['left', 'right', 'up', 'down']),\n\n  /**\n   * If `true`, show the component; triggers the enter or exit animation.\n   */\n  in: _propTypes.default.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onExit: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onExited: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  style: _propTypes.default.object,\n\n  /**\n   * @ignore\n   */\n  theme: _propTypes.default.object.isRequired,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  timeout: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n    enter: _propTypes.default.number,\n    exit: _propTypes.default.number\n  })])\n} : {};\nSlide.defaultProps = {\n  direction: 'down',\n  timeout: {\n    enter: _transitions.duration.enteringScreen,\n    exit: _transitions.duration.leavingScreen\n  }\n};\n\nvar _default = (0, _withTheme.default)()(Slide);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}