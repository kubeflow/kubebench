{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formControlState = formControlState;\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar _reactHelpers = require(\"../utils/reactHelpers\");\n\nvar _Textarea = _interopRequireDefault(require(\"./Textarea\"));\n\nvar _utils = require(\"./utils\");\n/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n\n\nvar styles = function styles(theme) {\n  var light = theme.palette.type === 'light';\n  var placeholder = {\n    color: 'currentColor',\n    opacity: light ? 0.42 : 0.5,\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.shorter\n    })\n  };\n  var placeholderHidden = {\n    opacity: 0\n  };\n  var placeholderVisible = {\n    opacity: light ? 0.42 : 0.5\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      // Mimics the default input display property used by browsers for an input.\n      fontFamily: theme.typography.fontFamily,\n      color: theme.palette.text.primary,\n      fontSize: theme.typography.pxToRem(16),\n      lineHeight: '1.1875em',\n      // Reset (19px), match the native input line-height\n      cursor: 'text',\n      display: 'inline-flex',\n      alignItems: 'center',\n      '&$disabled': {\n        color: theme.palette.text.disabled,\n        cursor: 'default'\n      }\n    },\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {},\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {},\n\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {},\n\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\")\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the `input` element. */\n    input: {\n      font: 'inherit',\n      color: 'currentColor',\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\n      border: 0,\n      boxSizing: 'content-box',\n      background: 'none',\n      margin: 0,\n      // Reset for Safari\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      display: 'block',\n      // Make the flex item shrink with Firefox\n      minWidth: 0,\n      width: '100%',\n      // Fix IE 11 width issue\n      '&::-webkit-input-placeholder': placeholder,\n      '&::-moz-placeholder': placeholder,\n      // Firefox 19+\n      '&:-ms-input-placeholder': placeholder,\n      // IE 11\n      '&::-ms-input-placeholder': placeholder,\n      // Edge\n      '&:focus': {\n        outline: 0\n      },\n      // Reset Firefox invalid required input style\n      '&:invalid': {\n        boxShadow: 'none'\n      },\n      '&::-webkit-search-decoration': {\n        // Remove the padding when type=search.\n        '-webkit-appearance': 'none'\n      },\n      // Show and hide the placeholder logic\n      'label[data-shrink=false] + $formControl &': {\n        '&::-webkit-input-placeholder': placeholderHidden,\n        '&::-moz-placeholder': placeholderHidden,\n        // Firefox 19+\n        '&:-ms-input-placeholder': placeholderHidden,\n        // IE 11\n        '&::-ms-input-placeholder': placeholderHidden,\n        // Edge\n        '&:focus::-webkit-input-placeholder': placeholderVisible,\n        '&:focus::-moz-placeholder': placeholderVisible,\n        // Firefox 19+\n        '&:focus:-ms-input-placeholder': placeholderVisible,\n        // IE 11\n        '&:focus::-ms-input-placeholder': placeholderVisible // Edge\n\n      },\n      '&$disabled': {\n        opacity: 1 // Reset iOS opacity\n\n      }\n    },\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 4 - 1\n    },\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      resize: 'none',\n      padding: 0\n    },\n\n    /* Styles applied to the `input` element if `type` is not \"text\"`. */\n    inputType: {\n      // type=\"date\" or type=\"time\", etc. have specific styles we need to reset.\n      height: '1.1875em' // Reset (19px), match the native input line-height\n\n    },\n\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {\n      // Improve type search style.\n      '-moz-appearance': 'textfield',\n      '-webkit-appearance': 'textfield'\n    },\n\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {},\n\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {}\n  };\n};\n\nexports.styles = styles;\n\nfunction formControlState(_ref) {\n  var props = _ref.props,\n      states = _ref.states,\n      context = _ref.context;\n  return states.reduce(function (acc, state) {\n    acc[state] = props[state];\n\n    if (context && context.muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = context.muiFormControl[state];\n      }\n    }\n\n    return acc;\n  }, {});\n}\n/**\n * `InputBase` contains as few styles as possible.\n * It aims to be a simple building block for creating an input.\n * It contains a load of style reset and some state logic.\n */\n\n\nvar InputBase =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(InputBase, _React$Component);\n\n  function InputBase(props, context) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, InputBase);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(InputBase).call(this, props, context));\n    _this.state = {\n      focused: false\n    };\n\n    _this.handleFocus = function (event) {\n      // Fix a bug with IE 11 where the focus/blur events are triggered\n      // while the input is disabled.\n      if (formControlState({\n        props: _this.props,\n        context: _this.context,\n        states: ['disabled']\n      }).disabled) {\n        event.stopPropagation();\n        return;\n      }\n\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n\n      var muiFormControl = _this.context.muiFormControl;\n\n      if (muiFormControl && muiFormControl.onFocus) {\n        muiFormControl.onFocus(event);\n      }\n    };\n\n    _this.handleBlur = function (event) {\n      _this.setState({\n        focused: false\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n\n      var muiFormControl = _this.context.muiFormControl;\n\n      if (muiFormControl && muiFormControl.onBlur) {\n        muiFormControl.onBlur(event);\n      }\n    };\n\n    _this.handleChange = function () {\n      if (!_this.isControlled) {\n        _this.checkDirty(_this.inputRef);\n      } // Perform in the willUpdate\n\n\n      if (_this.props.onChange) {\n        var _this$props;\n\n        (_this$props = _this.props).onChange.apply(_this$props, arguments);\n      }\n    };\n\n    _this.handleRefInput = function (ref) {\n      _this.inputRef = ref;\n      var refProp;\n\n      if (_this.props.inputRef) {\n        refProp = _this.props.inputRef;\n      } else if (_this.props.inputProps && _this.props.inputProps.ref) {\n        refProp = _this.props.inputProps.ref;\n      }\n\n      (0, _reactHelpers.setRef)(refProp, ref);\n    };\n\n    _this.handleClick = function (event) {\n      if (_this.inputRef && event.currentTarget === event.target) {\n        _this.inputRef.focus();\n      }\n\n      if (_this.props.onClick) {\n        _this.props.onClick(event);\n      }\n    };\n\n    _this.isControlled = props.value != null;\n\n    if (_this.isControlled) {\n      _this.checkDirty(props);\n    }\n\n    var componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {\n      // The blur won't fire when the disabled state is set on a focused input.\n      // We need to book keep the focused state manually.\n      if (!formControlState({\n        props: _this.props,\n        context: _this.context,\n        states: ['disabled']\n      }).disabled && formControlState({\n        props: nextProps,\n        context: nextContext,\n        states: ['disabled']\n      }).disabled) {\n        _this.setState({\n          focused: false\n        });\n      }\n    };\n\n    var componentWillUpdate = function componentWillUpdate(nextProps, nextState, nextContext) {\n      // Book keep the focused state.\n      if (!formControlState({\n        props: _this.props,\n        context: _this.context,\n        states: ['disabled']\n      }).disabled && formControlState({\n        props: nextProps,\n        context: nextContext,\n        states: ['disabled']\n      }).disabled) {\n        var muiFormControl = _this.context.muiFormControl;\n\n        if (muiFormControl && muiFormControl.onBlur) {\n          muiFormControl.onBlur();\n        }\n      }\n    };\n    /* eslint-disable no-underscore-dangle */\n\n\n    _this.componentWillReceiveProps = componentWillReceiveProps;\n    _this.componentWillReceiveProps.__suppressDeprecationWarning = true;\n    _this.componentWillUpdate = componentWillUpdate;\n    _this.componentWillUpdate.__suppressDeprecationWarning = true;\n    /* eslint-enable no-underscore-dangle */\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(InputBase, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      // We are consuming the parent muiFormControl context.\n      // We don't want a child to consume it a second time.\n      return {\n        muiFormControl: null\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.isControlled) {\n        this.checkDirty(this.inputRef);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.isControlled) {\n        this.checkDirty(this.props);\n      } // else performed in the onChange\n\n    }\n  }, {\n    key: \"checkDirty\",\n    value: function checkDirty(obj) {\n      var muiFormControl = this.context.muiFormControl;\n\n      if ((0, _utils.isFilled)(obj)) {\n        if (muiFormControl && muiFormControl.onFilled) {\n          muiFormControl.onFilled();\n        }\n\n        if (this.props.onFilled) {\n          this.props.onFilled();\n        }\n\n        return;\n      }\n\n      if (muiFormControl && muiFormControl.onEmpty) {\n        muiFormControl.onEmpty();\n      }\n\n      if (this.props.onEmpty) {\n        this.props.onEmpty();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames, _classNames2;\n\n      var _this$props2 = this.props,\n          autoComplete = _this$props2.autoComplete,\n          autoFocus = _this$props2.autoFocus,\n          classes = _this$props2.classes,\n          classNameProp = _this$props2.className,\n          defaultValue = _this$props2.defaultValue,\n          disabled = _this$props2.disabled,\n          endAdornment = _this$props2.endAdornment,\n          error = _this$props2.error,\n          fullWidth = _this$props2.fullWidth,\n          id = _this$props2.id,\n          inputComponent = _this$props2.inputComponent,\n          _this$props2$inputPro = _this$props2.inputProps;\n      _this$props2$inputPro = _this$props2$inputPro === void 0 ? {} : _this$props2$inputPro;\n      var inputPropsClassName = _this$props2$inputPro.className,\n          inputPropsProp = (0, _objectWithoutProperties2.default)(_this$props2$inputPro, [\"className\"]),\n          inputRef = _this$props2.inputRef,\n          margin = _this$props2.margin,\n          multiline = _this$props2.multiline,\n          name = _this$props2.name,\n          onBlur = _this$props2.onBlur,\n          onChange = _this$props2.onChange,\n          onClick = _this$props2.onClick,\n          onEmpty = _this$props2.onEmpty,\n          onFilled = _this$props2.onFilled,\n          onFocus = _this$props2.onFocus,\n          onKeyDown = _this$props2.onKeyDown,\n          onKeyUp = _this$props2.onKeyUp,\n          placeholder = _this$props2.placeholder,\n          readOnly = _this$props2.readOnly,\n          renderPrefix = _this$props2.renderPrefix,\n          rows = _this$props2.rows,\n          rowsMax = _this$props2.rowsMax,\n          startAdornment = _this$props2.startAdornment,\n          type = _this$props2.type,\n          value = _this$props2.value,\n          other = (0, _objectWithoutProperties2.default)(_this$props2, [\"autoComplete\", \"autoFocus\", \"classes\", \"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"fullWidth\", \"id\", \"inputComponent\", \"inputProps\", \"inputRef\", \"margin\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onClick\", \"onEmpty\", \"onFilled\", \"onFocus\", \"onKeyDown\", \"onKeyUp\", \"placeholder\", \"readOnly\", \"renderPrefix\", \"rows\", \"rowsMax\", \"startAdornment\", \"type\", \"value\"]);\n      var muiFormControl = this.context.muiFormControl;\n      var fcs = formControlState({\n        props: this.props,\n        context: this.context,\n        states: ['disabled', 'error', 'margin', 'required', 'filled']\n      });\n      var className = (0, _classnames.default)(classes.root, (_classNames = {}, (0, _defineProperty2.default)(_classNames, classes.disabled, fcs.disabled), (0, _defineProperty2.default)(_classNames, classes.error, fcs.error), (0, _defineProperty2.default)(_classNames, classes.fullWidth, fullWidth), (0, _defineProperty2.default)(_classNames, classes.focused, this.state.focused), (0, _defineProperty2.default)(_classNames, classes.formControl, muiFormControl), (0, _defineProperty2.default)(_classNames, classes.marginDense, fcs.margin === 'dense'), (0, _defineProperty2.default)(_classNames, classes.multiline, multiline), (0, _defineProperty2.default)(_classNames, classes.adornedStart, startAdornment), (0, _defineProperty2.default)(_classNames, classes.adornedEnd, endAdornment), _classNames), classNameProp);\n      var inputClassName = (0, _classnames.default)(classes.input, (_classNames2 = {}, (0, _defineProperty2.default)(_classNames2, classes.disabled, fcs.disabled), (0, _defineProperty2.default)(_classNames2, classes.inputType, type !== 'text'), (0, _defineProperty2.default)(_classNames2, classes.inputTypeSearch, type === 'search'), (0, _defineProperty2.default)(_classNames2, classes.inputMultiline, multiline), (0, _defineProperty2.default)(_classNames2, classes.inputMarginDense, fcs.margin === 'dense'), (0, _defineProperty2.default)(_classNames2, classes.inputAdornedStart, startAdornment), (0, _defineProperty2.default)(_classNames2, classes.inputAdornedEnd, endAdornment), _classNames2), inputPropsClassName);\n      var InputComponent = inputComponent;\n      var inputProps = (0, _extends2.default)({}, inputPropsProp, {\n        ref: this.handleRefInput\n      });\n\n      if (typeof InputComponent !== 'string') {\n        inputProps = (0, _extends2.default)({\n          // Rename ref to inputRef as we don't know the\n          // provided `inputComponent` structure.\n          inputRef: this.handleRefInput,\n          type: type\n        }, inputProps, {\n          ref: null\n        });\n      } else if (multiline) {\n        if (rows && !rowsMax) {\n          InputComponent = 'textarea';\n        } else {\n          inputProps = (0, _extends2.default)({\n            rowsMax: rowsMax,\n            textareaRef: this.handleRefInput\n          }, inputProps, {\n            ref: null\n          });\n          InputComponent = _Textarea.default;\n        }\n      } else {\n        inputProps = (0, _extends2.default)({\n          type: type\n        }, inputProps);\n      }\n\n      return _react.default.createElement(\"div\", (0, _extends2.default)({\n        className: className,\n        onClick: this.handleClick\n      }, other), renderPrefix ? renderPrefix((0, _extends2.default)({}, fcs, {\n        startAdornment: startAdornment,\n        focused: this.state.focused\n      })) : null, startAdornment, _react.default.createElement(InputComponent, (0, _extends2.default)({\n        \"aria-invalid\": fcs.error,\n        autoComplete: autoComplete,\n        autoFocus: autoFocus,\n        className: inputClassName,\n        defaultValue: defaultValue,\n        disabled: fcs.disabled,\n        id: id,\n        name: name,\n        onBlur: this.handleBlur,\n        onChange: this.handleChange,\n        onFocus: this.handleFocus,\n        onKeyDown: onKeyDown,\n        onKeyUp: onKeyUp,\n        placeholder: placeholder,\n        readOnly: readOnly,\n        required: fcs.required,\n        rows: rows,\n        value: value\n      }, inputProps)), endAdornment);\n    }\n  }]);\n  return InputBase;\n}(_react.default.Component);\n\nInputBase.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * This property helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it here:\n   * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n   */\n  autoComplete: _propTypes.default.string,\n\n  /**\n   * If `true`, the input will be focused during the first mount.\n   */\n  autoFocus: _propTypes.default.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The default input value, useful when not controlling the component.\n   */\n  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: _propTypes.default.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: _propTypes.default.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: _propTypes.default.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: _propTypes.default.string,\n\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * Attributes applied to the `input` element.\n   */\n  inputProps: _propTypes.default.object,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: _propTypes.default.oneOf(['dense', 'none']),\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: _propTypes.default.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: _propTypes.default.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: _propTypes.default.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onEmpty: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onFilled: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: _propTypes.default.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: _propTypes.default.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: _propTypes.default.bool,\n\n  /**\n   * @ignore\n   */\n  renderPrefix: _propTypes.default.func,\n\n  /**\n   * If `true`, the input will be required.\n   */\n  required: _propTypes.default.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: _propTypes.default.node,\n\n  /**\n   * Type of the input element. It should be a valid HTML5 input type.\n   */\n  type: _propTypes.default.string,\n\n  /**\n   * The input value, required for a controlled component.\n   */\n  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]))])\n} : {};\nInputBase.defaultProps = {\n  fullWidth: false,\n  inputComponent: 'input',\n  multiline: false,\n  type: 'text'\n};\nInputBase.contextTypes = {\n  muiFormControl: _propTypes.default.object\n};\nInputBase.childContextTypes = {\n  muiFormControl: _propTypes.default.object\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiInputBase'\n})(InputBase);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}